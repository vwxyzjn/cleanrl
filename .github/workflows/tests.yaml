name: tests
on:
  pull_request:
    paths-ignore:
      - '**/README.md'
      - 'docs/**/*'
      - 'cloud/**/*'
jobs:
  test-core-envs:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        poetry-version: ["1.7"]
        os: [ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # classic control tests
      - name: Install core dependencies
        run: uv pip install pytest
      - name: Downgrade setuptools
        run: poetry run pip install setuptools==59.5.0
      - name: Run core tests
        run: uv run pytest tests/test_classic_control.py
      - name: Install jax
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: uv install ."pytest jax"
      - name: Run gymnasium migration dependencies
        run: uv pip install "stable_baselines3==2.0.0a1"
      - name: Run gymnasium tests
        run: uv run pytest tests/test_classic_control_gymnasium.py
      - name: Run core tests with jax
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: uv run pytest tests/test_classic_control_jax_gymnasium.py
      - name: Run gae tests with jax
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: uv run pytest tests/test_jax_compute_gae.py
      - name: Install tuner dependencies
        run: uv pip install ".[pytest, optuna]"
      - name: Run tuner tests
        run: uv run pytest tests/test_tuner.py

  test-atari-envs:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        poetry-version: ["1.7"]
        os: [ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # atari tests
      - name: Install atari dependencies
        run: uv pip install ".[pytest, atari]"
      - name: Downgrade setuptools
        run: uv run pip install setuptools==59.5.0
      - name: Run atari tests
        run: uv run pytest tests/test_atari.py
      - name: Install jax
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: uv pip install ".[pytest, atari, jax]"
      - name: Run gymnasium migration dependencies
        run: uv run pip install "stable_baselines3==2.0.0a1" "gymnasium[atari,accept-rom-license]==0.28.1" "ale-py==0.8.1"
      - name: Run gymnasium tests
        run: uv run pytest tests/test_atari_gymnasium.py
      - name: Run gymnasium tests with jax
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: uv run pytest tests/test_atari_jax_gymnasium.py

  test-procgen-envs:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        poetry-version: ["1.7"]
        os: [ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # procgen tests
      - name: Install core dependencies
        run: uv pip install ".[pytest, procgen]"
      - name: Downgrade setuptools
        run: uv run pip install setuptools==59.5.0
      - name: Run procgen tests
        run: uv run pytest tests/test_procgen.py

  test-mujoco-envs:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        poetry-version: ["1.7"]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # mujoco tests
      - name: Install dependencies
        run: uv pip install ".[pytest, mujoco, dm_control, jax]"
      - name: Downgrade setuptools
        run: uv run pip install setuptools==59.5.0
      - name: Run gymnasium migration dependencies
        run: uv run pip install "stable_baselines3==2.0.0a1"
      - name: install mujoco dependencies
        run: |
          sudo apt-get update && sudo apt-get -y install libgl1-mesa-glx libosmesa6 libglfw3
      - name: Run mujoco tests
        continue-on-error: true # MUJOCO_GL=osmesa results in `free(): invalid pointer`
        run: uv run pytest tests/test_mujoco.py

  test-mujoco-envs-mac:
    strategy:
       fail-fast: false
       matrix:
         python-version: [3.8]
         poetry-version: [1.3.1]
         os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # mujoco tests
      - name: Install dependencies
        run: uv pip install ".[pytest, mujoco, dm_control, jax]"
      - name: Downgrade setuptools
        run: uv pip install setuptools==59.5.0
      - name: Run gymnasium migration dependencies
        run: uv pip install "stable_baselines3==2.0.0a1"
      - name: Run mujoco tests
        run: uv run pytest tests/test_mujoco.py

#  test-mujoco_py-envs:
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: ["3.8", "3.9", "3.10"]
#        poetry-version: ["1.7"]
#        os: [ubuntu-22.04]
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install uv
#        uses: astral-sh/setup-uv@v5

  test-envpool-envs:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        poetry-version: ["1.7"]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # envpool tests
      - name: Install envpool dependencies
        run: uv pip install ".[pytest, envpool, jax, ppo_atari_envpool_xla_jax_scan]"
      - name: Downgrade setuptools
        run: uv pip install setuptools==59.5.0
      - name: Run envpool tests
        run: uv run pytest tests/test_envpool.py

  test-atari-multigpu-envs:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        poetry-version: ["1.7"]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # atari multigpu tests
      - name: Install atari dependencies
        run: uv pip install ".[pytest, atari]"
      - name: Downgrade setuptools
        run: uv pip install setuptools==59.5.0
      - name: Run atari tests
        run: uv run pytest tests/test_atari_multigpu.py

  test-pettingzoo-envs:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        poetry-version: ["1.7"]
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # pettingzoo tests
      - name: Install pettingzoo dependencies
        run: uv pip install ".[pytest, pettingzoo, atari]"
      - name: Downgrade setuptools
        run: uv pip install setuptools==59.5.0
      - name: Install ROMs
        run: poetry run AutoROM --accept-license
      - name: Run pettingzoo tests
        run: poetry run pytest tests/test_pettingzoo_ma_atari.py
